#!/usr/bin/env node

const { existsSync } = require('fs')
const path = require('path')
const parse = require('minimist')
const dotenv = require('dotenv')
const { start } = require('../')

const help = () => {
  console.log(`Usage: micro-bot [opts] <file>

  -t  Bot token
  -d  Webhook domain [$BOT_DOMAIN or $NOW_URL]
  -H  Webhook host [0.0.0.0]
  -p  Webhook port [$PORT or 3000]
  -e  Load env vars from file. [.env]'
  -s  Silent mode
  -h  Show this help message
  -v  Show version information`)
}

const args = parse(process.argv, {
  alias: {
    d: 'domain',
    e: 'dotenv',
    h: 'help',
    H: 'host',
    p: 'port',
    s: 'silent',
    t: 'token',
    v: 'version'
  },
  boolean: ['h', 'v', 's'],
  default: {
    H: '0.0.0.0',
    p: process.env.PORT || 3000
  }
})

if (args.help) {
  help()
  process.exit(0)
}

if (args.version) {
  const packageData = require('../package.json')
  console.log(`v${packageData.version}`)
  process.exit(0)
}

if (args.dotenv) {
  const dotenvFileName = typeof args.dotenv === 'string' ? args.dotenv : '.env'
  if (!existsSync(dotenvFileName)) {
    console.error(`μ-bot: -e flag is set but ${dotenvFileName} file is missing`)
    help()
    process.exit(1)
  }
  dotenv.config({ path: dotenvFileName })
}

const token = args.token || process.env.BOT_TOKEN
if (!token) {
  console.error(`μ-bot: Please supply Bot token`)
  help()
  process.exit(1)
}

let [,, file] = args._

if (!file) {
  try {
    const packageJson = require(path.resolve(process.cwd(), 'package.json'))
    file = packageJson.main || 'index.js'
  } catch (err) {
    if (err.code === 'MODULE_NOT_FOUND') {
      console.error(`μ-bot: Could not read \`package.json\`: ${err.message}`)
      process.exit(1)
    }
  }
}

if (!file) {
  console.error('μ-bot: Please supply a file with bot handler.')
  help()
  process.exit(1)
}

if (file[0] !== '/') {
  file = path.resolve(process.cwd(), file)
}

let botModule
try {
  botModule = require(file)
} catch (err) {
  console.error(`μ-bot: Error when importing ${file}: ${err.stack}`)
  process.exit(1)
}

const domain = args.domain || process.env.BOT_DOMAIN || process.env.NOW_URL

const botOptions = {
  token,
  domain,
  botModule,
  port: args.port,
  host: args.host
}

start(botOptions).catch((err) => {
  console.warn(`μ-bot: Failed to start: ${err}`)
})
